/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Skylar Muffin (https://sketchfab.com/boopdesignstudio)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/stylized-3d-floating-island-and-mine-house-3cb24182a8504d439ee4e3c500565ac5
Title: Stylized 3D Floating Island And Mine House
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from "@react-spring/three";
import islandScene from "../assets/3d/island.glb";

export function Island(props) {
  const { isRotating, setIsRotating, setCurrentStage } = props;

  const islandRef = useRef();
  const lastX = useRef(0);
  const rotationSpeed = useRef(0); // Only declare once
  const dampingFactor = 0.95; // Only declare once

  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(islandScene);

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating && islandRef.current) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
      rotationSpeed.current = delta * 0.005 * Math.PI; // Adjust for sensitivity
      islandRef.current.rotation.y += rotationSpeed.current;
      lastX.current = clientX;
    }
  };

  const handleKeyDown = (e) => {
    if (
      (e.key === "ArrowLeft" || e.key === "ArrowRight") &&
      islandRef.current
    ) {
      setIsRotating(true);
      const rotationChange =
        e.key === "ArrowLeft" ? 0.01 * Math.PI : -0.01 * Math.PI;
      islandRef.current.rotation.y += rotationChange;
    }
  };

  const handleKeyUp = (e) => {
    if (
      (e.key === "ArrowLeft" || e.key === "ArrowRight") &&
      islandRef.current
    ) {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    const Canvas = gl.domElement;
    Canvas.addEventListener("pointerdown", handlePointerDown);
    Canvas.addEventListener("pointerup", handlePointerUp);
    Canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      Canvas.removeEventListener("pointerdown", handlePointerDown);
      Canvas.removeEventListener("pointerup", handlePointerUp);
      Canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [
    gl.domElement,
    handlePointerDown,
    handlePointerUp,
    handlePointerMove,
    handleKeyDown,
    handleKeyUp,
  ]);

  useFrame(() => {
    if (islandRef.current) {
      if (!isRotating) {
        rotationSpeed.current *= dampingFactor;
        islandRef.current.rotation.y += rotationSpeed.current;

        if (Math.abs(rotationSpeed.current) < 0.001) {
          rotationSpeed.current = 0;
        }
      }
      const rotation = islandRef.current.rotation.y;
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      console.log(normalizedRotation);

      if (normalizedRotation >= 0 && normalizedRotation < 1.57) {
        setCurrentStage(1); // Front
      } else if (normalizedRotation >= 1.57 && normalizedRotation < 3.14) {
        setCurrentStage(2); // Right
      } else if (normalizedRotation >= 3.14 && normalizedRotation < 4.71) {
        setCurrentStage(3); // Back
      } else if (normalizedRotation >= 4.71 || normalizedRotation < 0.1) {
        setCurrentStage(4); // Left
      }
    }
  });

  // return for islandRef //
  return (
    <a.group ref={islandRef} {...props}>
      <group {...props}>
        <group position={[0, 30, 0]} rotation={[0, 0, 0]}>
          <group rotation={[0, 2, 0]} scale={0.7}>
            <group position={[0, 5, -11]} rotation={[0, 2.8, 0]}>
              <mesh
                geometry={nodes.Final_Bridge1_Black_0.geometry}
                material={materials.Black}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_Black_0.geometry}
                material={materials.Black}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_Final_Rocks2_Mat_0.geometry}
                material={materials.Final_Rocks2_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_Final_Water001_0.geometry}
                material={materials["Final_Water.001"]}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Bridge_Mat001_0.geometry}
                material={materials["SF_Bridge_Mat.001"]}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Bridge_Mat_0.geometry}
                material={materials.SF_Bridge_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Bush_Mat_0.geometry}
                material={materials.SF_Bush_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_ButterFly_Mat_0.geometry}
                material={materials.SF_ButterFly_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Candle_Mat_0.geometry}
                material={materials.SF_Candle_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Chimney_Mat_0.geometry}
                material={materials.SF_Chimney_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_CutRock_Mat_0.geometry}
                material={materials.SF_CutRock_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Door_Mat_0.geometry}
                material={materials.SF_Door_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Grass_Mat_0.geometry}
                material={materials.SF_Grass_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0.geometry}
                material={materials.SF_GrassCards_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0001.geometry}
                material={materials.SF_GrassCards_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0002.geometry}
                material={materials.SF_GrassCards_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_GrassCards_Mat_0003.geometry}
                material={materials.SF_GrassCards_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_HouseJoins_Mat_0.geometry}
                material={materials.SF_HouseJoins_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_HouseSupport_Mat_0.geometry}
                material={materials.SF_HouseSupport_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Island_Mat_0.geometry}
                material={materials.SF_Island_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Lamp_Mat_0.geometry}
                material={materials.SF_Lamp_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_LampGlass_Mat_0.geometry}
                material={materials.SF_LampGlass_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Lillypad_Mat_0.geometry}
                material={materials.SF_Lillypad_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_MineCart_Mat_0.geometry}
                material={materials.SF_MineCart_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_PlasterTex_Mat_0.geometry}
                material={materials.SF_PlasterTex_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Rail_Mat_0.geometry}
                material={materials.SF_Rail_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Rocks_Mat_0.geometry}
                material={materials.SF_Rocks_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Roof_Final_0.geometry}
                material={materials.SF_Roof_Final}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Roof_Final_0001.geometry}
                material={materials.SF_Roof_Final}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Roof_Final_0002.geometry}
                material={materials.SF_Roof_Final}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Roof_Final_0003.geometry}
                material={materials.SF_Roof_Final}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Sack_Mat_0.geometry}
                material={materials.SF_Sack_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Stalagmites_Mat_0.geometry}
                material={materials.SF_Stalagmites_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_StoneBrick_Mat_0.geometry}
                material={materials.SF_StoneBrick_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_TreeLeaf_Mat_0.geometry}
                material={materials.SF_TreeLeaf_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_TreeWood_Mat_0.geometry}
                material={materials.SF_TreeWood_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_TreeWood_Mat_0001.geometry}
                material={materials.SF_TreeWood_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Water_Mat_0.geometry}
                material={materials.SF_Water_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Windows_Mat_0.geometry}
                material={materials.SF_Windows_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Windows_Mat_0001.geometry}
                material={materials.SF_Windows_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_Windows_Mat_0002.geometry}
                material={materials.SF_Windows_Mat}
                position={[39.398, 1.801, -19.346]}
              />
              <mesh
                geometry={nodes.Final_Bridge1_SF_WoodTex_Mat_0.geometry}
                material={materials.SF_WoodTex_Mat}
                position={[39.398, 1.801, -19.346]}
              />
            </group>
          </group>
        </group>
      </group>
    </a.group>
  );
}

export default Island;
